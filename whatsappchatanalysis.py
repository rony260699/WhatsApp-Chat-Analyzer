# -*- coding: utf-8 -*-
"""WhatsappChatAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rgHjaLwrwp2pzYXiP5fR0BSCPPtmiPWe
"""

import re           # re = regular expression
import pandas as pd

"""Open text file"""

# file handling using python
f = open('WhatsApp Chat with Manjummal boys.txt', 'r', encoding='utf-8')

# read files content as a string and store in data variable
data = f.read()

print(data)

print(type(data))

"""# Data Preprocessing start"""

# "1/7/25, 10:40â€¯am -" set its regular expression on pattern variable
pattern = '\d{1,2}/\d{1,2}/\d{2},\s\d{1,2}:\d{2}\s[ap]m\s-'

# pattern(regular expression) er upor base kore data k dui vage vag kore dewa
message = re.split(pattern, data)[1:]
message

# find all string which is follow pattern(here it is date) and store it on dates
dates = re.findall(pattern, data)
dates

# create a dataframe where message and date has ploted
df = pd.DataFrame({'user_message': message, 'message_date': dates})
df['message_date'] = pd.to_datetime(df['message_date'], format='%m/%d/%y, %I:%M\u202f%p -')
df.rename(columns={'message_date': 'date'}, inplace=True)
df.head(5)

df.shape

# seperate users and messages
user = []
message = []

for msg in df['user_message']:
  conversation = re.split('([\w\W]+?):\s', msg)   # ^[A-Za-z\s]+:|^\+\d+: learn letter about it
  if conversation[1:]: # user name
    user.append(conversation[1])
    message.append(conversation[2])
  else:
    user.append('group_notification')
    message.append(conversation[0])
df.drop(columns = ['user_message'], inplace=True)
df['user'] = user
df['message'] = message
df.head(5)

df['year'] = df['date'].dt.year
df

df['month'] = df['date'].dt.month_name()
df

# df['day'] = df['date'].dt.day_name() # we can create also date name
df['day'] = df['date'].dt.day
df

df['hour'] = df['date'].dt.hour
df['minute'] = df['date'].dt.minute

df.head()

# fetch number of words
words = []
for msg in df['message']:
    words.extend(msg.split())
len(words)

# fetch number of media
df[df['message'] == '<Media omitted>\n'].shape[0]

pip install urlextract

from urlextract import URLExtract
extrct = URLExtract()
lnks = []
for i in df['message']:
  lnks.extend(extrct.find_urls(i))

lnks

len(lnks)

df

x = df['user'].value_counts().head()

import matplotlib.pyplot as plt

name = x.index
count = x.values

plt.bar(name, count)
# if names are not visible for long namse
#plt.xticks(rotation = 'vertical')
# plt.show

round((df['user'].value_counts()/df.shape[0])*100, 2).reset_index() # reset_index convert it on df

# remove group notification
# remove <media omitted>
# remove stop words

# remove group notification
temp = df[df['user'] != 'group_notification']

# remove <media omitted>
temp = temp[temp['message'] != '<Media omitted>']

# remove stop words

# get top using words
words =[]
for msg in df['message']:
  words.extend(msg.split())

from collections import Counter
pd.DataFrame(Counter(words).most_common(20))

# analyze emoji
!pip install emoji

import emoji

emojis = []
for msg in df['message']:
  emojis.extend([c for c in msg if c in emoji.EMOJI_DATA])

emog = pd.DataFrame(Counter(emojis).most_common(len(Counter(emojis))))

emog

df['month_num'] = df['date'].dt.month

df

df.groupby(['year', 'month_num','month' ]).count()['message']

timeline = df.groupby(['year', 'month_num','month' ]).count()['message'].reset_index()

timeline

time = []
for i in range(timeline.shape[0]):
  time.append(str(timeline['month'][i]) + '-' + str(timeline['year'][i]))

time

timeline['time'] = time

plt.plot(timeline['time'], timeline['message'])
plt.xticks(rotation = 'vertical')
plt.show()

df['only_date'] = df['date'].dt.date

daily_timeline = df.groupby('only_date').count()['message'].reset_index()

plt.figure(figsize=(18,10))
plt.plot(daily_timeline['only_date'], daily_timeline['message'])
plt.xticks(rotation = 'vertical')
plt.show()

df['day_name'] = df['date'].dt.day_name()

df

actvt = df['day_name'].value_counts()

actvt

period = []
for hour in df[['day_name', 'hour']]['hour']:
  if hour == 23:
    period.append(str(hour) + "-" + str('00'))
  elif hour == 0:
    period.append(str('00') + "-" + str(hour + 1))
  else:
    period.append(str(hour) + "-" + str(hour + 1))

df['period'] = period

df.sample(5)

import seaborn as sns
plt.figure(figsize =(20, 6))
sns.heatmap(df.pivot_table(index = 'day_name', columns = 'period', values = 'message', aggfunc = 'count').fillna(0))
plt.xticks(rotation = 'vertical')
plt.show()